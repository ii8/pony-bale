use "ponytest"
use "../bale"

actor Main is TestList
  new create(env: Env) => PonyTest(env, this)

  new make() => None

  fun tag tests(test: PonyTest) =>
    test(_ReadUV)
    test(_WriteUV)

class iso _ReadUV is UnitTest
  fun name(): String => "read.uv"

  fun apply(h: TestHelper) =>
    for (k, v) in _Data().values() do
      let r = BaleReader(v)
      let n = try
        let n' = r.uv()?
        r.done()?
        n'
      else
        0
      end
      h.assert_eq[U64](n, k)
    end

class iso _WriteUV is UnitTest
  fun name(): String => "write.uv"

  fun apply(h: TestHelper) =>
    for (k, v) in _Data().values() do
      let w = BaleWriter
      w.uv(k)
      let a = Array[U8]
      for bs in w.w.done().values() do
        a.append(bs)
      end
      h.assert_array_eq[U8](a, v)
    end

primitive _Data
  fun apply(): Array[(U64, Array[U8] val)] =>
    [ as (U64, Array[U8] val):
      (1, [0x01])
      (2, [0x02])
      (3, [0x03])
      (10, [0x0a])
      (16, [0x10])
      (100, [0x64])
      (240, [0xf0])
      (241, [0xf1; 0x01])
      (1243, [0xf4; 0xeb])
      (2287, [0xf8; 0xff])
      (2288, [0xf9; 0x00; 0x00])
      (10000, [0xf9; 0x1e; 0x20])
      (12437, [0xf9; 0x27; 0xa5])
      (67823, [0xf9; 0xff; 0xff])
      (67824, [0xfa; 0x01; 0x08; 0xf0])
      (222222, [0xfa; 0x03; 0x64; 0x0e])
      (2222222, [0xfa; 0x21; 0xe8; 0x8e])
      (16777215, [0xfa; 0xff; 0xff; 0xff])
      (22222222, [0xfb; 0x01; 0x53; 0x15; 0x8e])
      (16777216, [0xfb; 0x01; 0x00; 0x00; 0x00])
      (222222222, [0xfb; 0x0d; 0x3e; 0xd7; 0x8e])
      (2222222222, [0xfb; 0x84; 0x74; 0x6b; 0x8e])
      (4294967295, [0xfb; 0xff; 0xff; 0xff; 0xff])
      (4294967296, [0xfc; 0x01; 0x00; 0x00; 0x00; 0x00])
      (22222222222, [0xfc; 0x05; 0x2c; 0x8c; 0x33; 0x8e])
      (222222222222, [0xfc; 0x33; 0xbd; 0x7a; 0x03; 0x8e])
      (1099511627775, [0xfc; 0xff; 0xff; 0xff; 0xff; 0xff])
      (1099511627776, [0xfd; 0x01; 0x00; 0x00; 0x00; 0x00; 0x00])
      (2222222222222, [0xfd; 0x02; 0x05; 0x66; 0xc4; 0x23; 0x8e])
      (222222222222222, [0xfd; 0xca; 0x1c; 0x24; 0x9d; 0xe3; 0x8e])
      (281474976710655, [0xfd; 0xff; 0xff; 0xff; 0xff; 0xff; 0xff])
      (281474976710656, [0xfe; 0x01; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00])
      (2222222222222222, [0xfe; 0x07; 0xe5; 0x19; 0x6e; 0x2a; 0xe3; 0x8e])
      (72057594037927935, [0xfe; 0xff; 0xff; 0xff; 0xff; 0xff; 0xff; 0xff])
      (72057594037927936, [0xff; 0x01; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00])
      (222222222222222222, [0xff; 0x03; 0x15; 0x7d; 0xef; 0x08; 0xc0; 0xe3; 0x8e])
      (18446744073709551615, [0xff; 0xff; 0xff; 0xff; 0xff; 0xff; 0xff; 0xff; 0xff])
    ]
